// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: encryption.proto

#include "encryption.pb.h"
#include "encryption.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace encryption {

static const char* EncryptionService_method_names[] = {
  "/encryption.EncryptionService/EncryptChunk",
  "/encryption.EncryptionService/DecryptChunk",
  "/encryption.EncryptionService/TestConnection",
};

std::unique_ptr< EncryptionService::Stub> EncryptionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EncryptionService::Stub> stub(new EncryptionService::Stub(channel, options));
  return stub;
}

EncryptionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EncryptChunk_(EncryptionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DecryptChunk_(EncryptionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestConnection_(EncryptionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EncryptionService::Stub::EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::encryption::ChunkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::encryption::ChunkRequest, ::encryption::ChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EncryptChunk_, context, request, response);
}

void EncryptionService::Stub::async::EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::encryption::ChunkRequest, ::encryption::ChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptChunk_, context, request, response, std::move(f));
}

void EncryptionService::Stub::async::EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncryptChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* EncryptionService::Stub::PrepareAsyncEncryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::encryption::ChunkResponse, ::encryption::ChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EncryptChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* EncryptionService::Stub::AsyncEncryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncryptChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EncryptionService::Stub::DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::encryption::ChunkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::encryption::ChunkRequest, ::encryption::ChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DecryptChunk_, context, request, response);
}

void EncryptionService::Stub::async::DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::encryption::ChunkRequest, ::encryption::ChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DecryptChunk_, context, request, response, std::move(f));
}

void EncryptionService::Stub::async::DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DecryptChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* EncryptionService::Stub::PrepareAsyncDecryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::encryption::ChunkResponse, ::encryption::ChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DecryptChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* EncryptionService::Stub::AsyncDecryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDecryptChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EncryptionService::Stub::TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::encryption::TestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::encryption::TestRequest, ::encryption::TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestConnection_, context, request, response);
}

void EncryptionService::Stub::async::TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::encryption::TestRequest, ::encryption::TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestConnection_, context, request, response, std::move(f));
}

void EncryptionService::Stub::async::TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>* EncryptionService::Stub::PrepareAsyncTestConnectionRaw(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::encryption::TestResponse, ::encryption::TestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>* EncryptionService::Stub::AsyncTestConnectionRaw(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

EncryptionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EncryptionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EncryptionService::Service, ::encryption::ChunkRequest, ::encryption::ChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EncryptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::encryption::ChunkRequest* req,
             ::encryption::ChunkResponse* resp) {
               return service->EncryptChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EncryptionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EncryptionService::Service, ::encryption::ChunkRequest, ::encryption::ChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EncryptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::encryption::ChunkRequest* req,
             ::encryption::ChunkResponse* resp) {
               return service->DecryptChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EncryptionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EncryptionService::Service, ::encryption::TestRequest, ::encryption::TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EncryptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::encryption::TestRequest* req,
             ::encryption::TestResponse* resp) {
               return service->TestConnection(ctx, req, resp);
             }, this)));
}

EncryptionService::Service::~Service() {
}

::grpc::Status EncryptionService::Service::EncryptChunk(::grpc::ServerContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EncryptionService::Service::DecryptChunk(::grpc::ServerContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EncryptionService::Service::TestConnection(::grpc::ServerContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace encryption

