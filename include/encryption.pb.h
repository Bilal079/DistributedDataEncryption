// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: encryption.proto
// Protobuf C++ Version: 5.29.3

#ifndef encryption_2eproto_2epb_2eh
#define encryption_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_encryption_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_encryption_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_encryption_2eproto;
namespace encryption {
class ChunkRequest;
struct ChunkRequestDefaultTypeInternal;
extern ChunkRequestDefaultTypeInternal _ChunkRequest_default_instance_;
class ChunkResponse;
struct ChunkResponseDefaultTypeInternal;
extern ChunkResponseDefaultTypeInternal _ChunkResponse_default_instance_;
class TestRequest;
struct TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class TestResponse;
struct TestResponseDefaultTypeInternal;
extern TestResponseDefaultTypeInternal _TestResponse_default_instance_;
}  // namespace encryption
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace encryption {

// ===================================================================


// -------------------------------------------------------------------

class TestResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:encryption.TestResponse) */ {
 public:
  inline TestResponse() : TestResponse(nullptr) {}
  ~TestResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestResponse(const TestResponse& from) : TestResponse(nullptr, from) {}
  inline TestResponse(TestResponse&& from) noexcept
      : TestResponse(nullptr, std::move(from)) {}
  inline TestResponse& operator=(const TestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestResponse& operator=(TestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestResponse* internal_default_instance() {
    return reinterpret_cast<const TestResponse*>(
        &_TestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TestResponse& a, TestResponse& b) { a.Swap(&b); }
  inline void Swap(TestResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestResponse& from) { TestResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "encryption.TestResponse"; }

 protected:
  explicit TestResponse(::google::protobuf::Arena* arena);
  TestResponse(::google::protobuf::Arena* arena, const TestResponse& from);
  TestResponse(::google::protobuf::Arena* arena, TestResponse&& from) noexcept
      : TestResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorkerIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kAliveFieldNumber = 1,
  };
  // string worker_id = 2;
  void clear_worker_id() ;
  const std::string& worker_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_worker_id(Arg_&& arg, Args_... args);
  std::string* mutable_worker_id();
  PROTOBUF_NODISCARD std::string* release_worker_id();
  void set_allocated_worker_id(std::string* value);

  private:
  const std::string& _internal_worker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worker_id(
      const std::string& value);
  std::string* _internal_mutable_worker_id();

  public:
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // int64 timestamp = 4;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // bool alive = 1;
  void clear_alive() ;
  bool alive() const;
  void set_alive(bool value);

  private:
  bool _internal_alive() const;
  void _internal_set_alive(bool value);

  public:
  // @@protoc_insertion_point(class_scope:encryption.TestResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr worker_id_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::int64_t timestamp_;
    bool alive_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class TestRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:encryption.TestRequest) */ {
 public:
  inline TestRequest() : TestRequest(nullptr) {}
  ~TestRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestRequest(const TestRequest& from) : TestRequest(nullptr, from) {}
  inline TestRequest(TestRequest&& from) noexcept
      : TestRequest(nullptr, std::move(from)) {}
  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
        &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TestRequest& a, TestRequest& b) { a.Swap(&b); }
  inline void Swap(TestRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestRequest& from) { TestRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "encryption.TestRequest"; }

 protected:
  explicit TestRequest(::google::protobuf::Arena* arena);
  TestRequest(::google::protobuf::Arena* arena, const TestRequest& from);
  TestRequest(::google::protobuf::Arena* arena, TestRequest&& from) noexcept
      : TestRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestMessageFieldNumber = 1,
  };
  // string test_message = 1;
  void clear_test_message() ;
  const std::string& test_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_test_message(Arg_&& arg, Args_... args);
  std::string* mutable_test_message();
  PROTOBUF_NODISCARD std::string* release_test_message();
  void set_allocated_test_message(std::string* value);

  private:
  const std::string& _internal_test_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_message(
      const std::string& value);
  std::string* _internal_mutable_test_message();

  public:
  // @@protoc_insertion_point(class_scope:encryption.TestRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr test_message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class ChunkResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:encryption.ChunkResponse) */ {
 public:
  inline ChunkResponse() : ChunkResponse(nullptr) {}
  ~ChunkResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChunkResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChunkResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChunkResponse(const ChunkResponse& from) : ChunkResponse(nullptr, from) {}
  inline ChunkResponse(ChunkResponse&& from) noexcept
      : ChunkResponse(nullptr, std::move(from)) {}
  inline ChunkResponse& operator=(const ChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkResponse& operator=(ChunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkResponse* internal_default_instance() {
    return reinterpret_cast<const ChunkResponse*>(
        &_ChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ChunkResponse& a, ChunkResponse& b) { a.Swap(&b); }
  inline void Swap(ChunkResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChunkResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChunkResponse& from) { ChunkResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChunkResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "encryption.ChunkResponse"; }

 protected:
  explicit ChunkResponse(::google::protobuf::Arena* arena);
  ChunkResponse(::google::protobuf::Arena* arena, const ChunkResponse& from);
  ChunkResponse(::google::protobuf::Arena* arena, ChunkResponse&& from) noexcept
      : ChunkResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProcessedDataFieldNumber = 1,
    kErrorMessageFieldNumber = 4,
    kChunkIdFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // bytes processed_data = 1;
  void clear_processed_data() ;
  const std::string& processed_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_processed_data(Arg_&& arg, Args_... args);
  std::string* mutable_processed_data();
  PROTOBUF_NODISCARD std::string* release_processed_data();
  void set_allocated_processed_data(std::string* value);

  private:
  const std::string& _internal_processed_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processed_data(
      const std::string& value);
  std::string* _internal_mutable_processed_data();

  public:
  // string error_message = 4;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int32 chunk_id = 2;
  void clear_chunk_id() ;
  ::int32_t chunk_id() const;
  void set_chunk_id(::int32_t value);

  private:
  ::int32_t _internal_chunk_id() const;
  void _internal_set_chunk_id(::int32_t value);

  public:
  // bool success = 3;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:encryption.ChunkResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChunkResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr processed_data_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::int32_t chunk_id_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class ChunkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:encryption.ChunkRequest) */ {
 public:
  inline ChunkRequest() : ChunkRequest(nullptr) {}
  ~ChunkRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChunkRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChunkRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChunkRequest(const ChunkRequest& from) : ChunkRequest(nullptr, from) {}
  inline ChunkRequest(ChunkRequest&& from) noexcept
      : ChunkRequest(nullptr, std::move(from)) {}
  inline ChunkRequest& operator=(const ChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkRequest& operator=(ChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkRequest* internal_default_instance() {
    return reinterpret_cast<const ChunkRequest*>(
        &_ChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ChunkRequest& a, ChunkRequest& b) { a.Swap(&b); }
  inline void Swap(ChunkRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChunkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChunkRequest& from) { ChunkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChunkRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "encryption.ChunkRequest"; }

 protected:
  explicit ChunkRequest(::google::protobuf::Arena* arena);
  ChunkRequest(::google::protobuf::Arena* arena, const ChunkRequest& from);
  ChunkRequest(::google::protobuf::Arena* arena, ChunkRequest&& from) noexcept
      : ChunkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kKeyFieldNumber = 3,
    kIvFieldNumber = 4,
    kChunkIdFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // bytes key = 3;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes iv = 4;
  void clear_iv() ;
  const std::string& iv() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_iv(Arg_&& arg, Args_... args);
  std::string* mutable_iv();
  PROTOBUF_NODISCARD std::string* release_iv();
  void set_allocated_iv(std::string* value);

  private:
  const std::string& _internal_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iv(
      const std::string& value);
  std::string* _internal_mutable_iv();

  public:
  // int32 chunk_id = 2;
  void clear_chunk_id() ;
  ::int32_t chunk_id() const;
  void set_chunk_id(::int32_t value);

  private:
  ::int32_t _internal_chunk_id() const;
  void _internal_set_chunk_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:encryption.ChunkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChunkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr iv_;
    ::int32_t chunk_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_encryption_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChunkRequest

// bytes data = 1;
inline void ChunkRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ChunkRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.ChunkRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChunkRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.ChunkRequest.data)
}
inline std::string* ChunkRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:encryption.ChunkRequest.data)
  return _s;
}
inline const std::string& ChunkRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ChunkRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ChunkRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ChunkRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.ChunkRequest.data)
  return _impl_.data_.Release();
}
inline void ChunkRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.ChunkRequest.data)
}

// int32 chunk_id = 2;
inline void ChunkRequest::clear_chunk_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_id_ = 0;
}
inline ::int32_t ChunkRequest::chunk_id() const {
  // @@protoc_insertion_point(field_get:encryption.ChunkRequest.chunk_id)
  return _internal_chunk_id();
}
inline void ChunkRequest::set_chunk_id(::int32_t value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:encryption.ChunkRequest.chunk_id)
}
inline ::int32_t ChunkRequest::_internal_chunk_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_id_;
}
inline void ChunkRequest::_internal_set_chunk_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_id_ = value;
}

// bytes key = 3;
inline void ChunkRequest::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ChunkRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.ChunkRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChunkRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.ChunkRequest.key)
}
inline std::string* ChunkRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:encryption.ChunkRequest.key)
  return _s;
}
inline const std::string& ChunkRequest::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void ChunkRequest::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* ChunkRequest::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* ChunkRequest::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.ChunkRequest.key)
  return _impl_.key_.Release();
}
inline void ChunkRequest::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.ChunkRequest.key)
}

// bytes iv = 4;
inline void ChunkRequest::clear_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iv_.ClearToEmpty();
}
inline const std::string& ChunkRequest::iv() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.ChunkRequest.iv)
  return _internal_iv();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChunkRequest::set_iv(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iv_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.ChunkRequest.iv)
}
inline std::string* ChunkRequest::mutable_iv() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_iv();
  // @@protoc_insertion_point(field_mutable:encryption.ChunkRequest.iv)
  return _s;
}
inline const std::string& ChunkRequest::_internal_iv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iv_.Get();
}
inline void ChunkRequest::_internal_set_iv(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iv_.Set(value, GetArena());
}
inline std::string* ChunkRequest::_internal_mutable_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.iv_.Mutable( GetArena());
}
inline std::string* ChunkRequest::release_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.ChunkRequest.iv)
  return _impl_.iv_.Release();
}
inline void ChunkRequest::set_allocated_iv(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iv_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.iv_.IsDefault()) {
    _impl_.iv_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.ChunkRequest.iv)
}

// -------------------------------------------------------------------

// ChunkResponse

// bytes processed_data = 1;
inline void ChunkResponse::clear_processed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.processed_data_.ClearToEmpty();
}
inline const std::string& ChunkResponse::processed_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.ChunkResponse.processed_data)
  return _internal_processed_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChunkResponse::set_processed_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.processed_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.ChunkResponse.processed_data)
}
inline std::string* ChunkResponse::mutable_processed_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_processed_data();
  // @@protoc_insertion_point(field_mutable:encryption.ChunkResponse.processed_data)
  return _s;
}
inline const std::string& ChunkResponse::_internal_processed_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.processed_data_.Get();
}
inline void ChunkResponse::_internal_set_processed_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.processed_data_.Set(value, GetArena());
}
inline std::string* ChunkResponse::_internal_mutable_processed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.processed_data_.Mutable( GetArena());
}
inline std::string* ChunkResponse::release_processed_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.ChunkResponse.processed_data)
  return _impl_.processed_data_.Release();
}
inline void ChunkResponse::set_allocated_processed_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.processed_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.processed_data_.IsDefault()) {
    _impl_.processed_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.ChunkResponse.processed_data)
}

// int32 chunk_id = 2;
inline void ChunkResponse::clear_chunk_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_id_ = 0;
}
inline ::int32_t ChunkResponse::chunk_id() const {
  // @@protoc_insertion_point(field_get:encryption.ChunkResponse.chunk_id)
  return _internal_chunk_id();
}
inline void ChunkResponse::set_chunk_id(::int32_t value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:encryption.ChunkResponse.chunk_id)
}
inline ::int32_t ChunkResponse::_internal_chunk_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_id_;
}
inline void ChunkResponse::_internal_set_chunk_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_id_ = value;
}

// bool success = 3;
inline void ChunkResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ChunkResponse::success() const {
  // @@protoc_insertion_point(field_get:encryption.ChunkResponse.success)
  return _internal_success();
}
inline void ChunkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:encryption.ChunkResponse.success)
}
inline bool ChunkResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ChunkResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 4;
inline void ChunkResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ChunkResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.ChunkResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChunkResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.ChunkResponse.error_message)
}
inline std::string* ChunkResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:encryption.ChunkResponse.error_message)
  return _s;
}
inline const std::string& ChunkResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void ChunkResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* ChunkResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* ChunkResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.ChunkResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void ChunkResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.ChunkResponse.error_message)
}

// -------------------------------------------------------------------

// TestRequest

// string test_message = 1;
inline void TestRequest::clear_test_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.ClearToEmpty();
}
inline const std::string& TestRequest::test_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.TestRequest.test_message)
  return _internal_test_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestRequest::set_test_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.TestRequest.test_message)
}
inline std::string* TestRequest::mutable_test_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_test_message();
  // @@protoc_insertion_point(field_mutable:encryption.TestRequest.test_message)
  return _s;
}
inline const std::string& TestRequest::_internal_test_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_message_.Get();
}
inline void TestRequest::_internal_set_test_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.Set(value, GetArena());
}
inline std::string* TestRequest::_internal_mutable_test_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_message_.Mutable( GetArena());
}
inline std::string* TestRequest::release_test_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.TestRequest.test_message)
  return _impl_.test_message_.Release();
}
inline void TestRequest::set_allocated_test_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.test_message_.IsDefault()) {
    _impl_.test_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.TestRequest.test_message)
}

// -------------------------------------------------------------------

// TestResponse

// bool alive = 1;
inline void TestResponse::clear_alive() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alive_ = false;
}
inline bool TestResponse::alive() const {
  // @@protoc_insertion_point(field_get:encryption.TestResponse.alive)
  return _internal_alive();
}
inline void TestResponse::set_alive(bool value) {
  _internal_set_alive(value);
  // @@protoc_insertion_point(field_set:encryption.TestResponse.alive)
}
inline bool TestResponse::_internal_alive() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alive_;
}
inline void TestResponse::_internal_set_alive(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alive_ = value;
}

// string worker_id = 2;
inline void TestResponse::clear_worker_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_id_.ClearToEmpty();
}
inline const std::string& TestResponse::worker_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.TestResponse.worker_id)
  return _internal_worker_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestResponse::set_worker_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.TestResponse.worker_id)
}
inline std::string* TestResponse::mutable_worker_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_worker_id();
  // @@protoc_insertion_point(field_mutable:encryption.TestResponse.worker_id)
  return _s;
}
inline const std::string& TestResponse::_internal_worker_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.worker_id_.Get();
}
inline void TestResponse::_internal_set_worker_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_id_.Set(value, GetArena());
}
inline std::string* TestResponse::_internal_mutable_worker_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.worker_id_.Mutable( GetArena());
}
inline std::string* TestResponse::release_worker_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.TestResponse.worker_id)
  return _impl_.worker_id_.Release();
}
inline void TestResponse::set_allocated_worker_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.worker_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.worker_id_.IsDefault()) {
    _impl_.worker_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.TestResponse.worker_id)
}

// string status = 3;
inline void TestResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& TestResponse::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:encryption.TestResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:encryption.TestResponse.status)
}
inline std::string* TestResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:encryption.TestResponse.status)
  return _s;
}
inline const std::string& TestResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void TestResponse::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* TestResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* TestResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:encryption.TestResponse.status)
  return _impl_.status_.Release();
}
inline void TestResponse::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:encryption.TestResponse.status)
}

// int64 timestamp = 4;
inline void TestResponse::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t TestResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:encryption.TestResponse.timestamp)
  return _internal_timestamp();
}
inline void TestResponse::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:encryption.TestResponse.timestamp)
}
inline ::int64_t TestResponse::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void TestResponse::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace encryption


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // encryption_2eproto_2epb_2eh
