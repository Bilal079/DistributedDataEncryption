// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: encryption.proto
// Protobuf C++ Version: 5.29.3

#include "encryption.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace encryption {

inline constexpr TestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : worker_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        alive_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestResponse::TestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestResponseDefaultTypeInternal() {}
  union {
    TestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestResponseDefaultTypeInternal _TestResponse_default_instance_;

inline constexpr TestRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : test_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestRequest::TestRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequestDefaultTypeInternal() {}
  union {
    TestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequestDefaultTypeInternal _TestRequest_default_instance_;

inline constexpr ChunkResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : processed_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chunk_id_{0},
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChunkResponse::ChunkResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkResponseDefaultTypeInternal() {}
  union {
    ChunkResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkResponseDefaultTypeInternal _ChunkResponse_default_instance_;

inline constexpr ChunkRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        iv_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chunk_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChunkRequest::ChunkRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkRequestDefaultTypeInternal() {}
  union {
    ChunkRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkRequestDefaultTypeInternal _ChunkRequest_default_instance_;
}  // namespace encryption
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_encryption_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_encryption_2eproto = nullptr;
const ::uint32_t
    TableStruct_encryption_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkRequest, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkRequest, _impl_.chunk_id_),
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkRequest, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkRequest, _impl_.iv_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkResponse, _impl_.processed_data_),
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkResponse, _impl_.chunk_id_),
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::encryption::ChunkResponse, _impl_.error_message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::encryption::TestRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::encryption::TestRequest, _impl_.test_message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::encryption::TestResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::encryption::TestResponse, _impl_.alive_),
        PROTOBUF_FIELD_OFFSET(::encryption::TestResponse, _impl_.worker_id_),
        PROTOBUF_FIELD_OFFSET(::encryption::TestResponse, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::encryption::TestResponse, _impl_.timestamp_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::encryption::ChunkRequest)},
        {12, -1, -1, sizeof(::encryption::ChunkResponse)},
        {24, -1, -1, sizeof(::encryption::TestRequest)},
        {33, -1, -1, sizeof(::encryption::TestResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::encryption::_ChunkRequest_default_instance_._instance,
    &::encryption::_ChunkResponse_default_instance_._instance,
    &::encryption::_TestRequest_default_instance_._instance,
    &::encryption::_TestResponse_default_instance_._instance,
};
const char descriptor_table_protodef_encryption_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020encryption.proto\022\nencryption\"G\n\014ChunkR"
    "equest\022\014\n\004data\030\001 \001(\014\022\020\n\010chunk_id\030\002 \001(\005\022\013"
    "\n\003key\030\003 \001(\014\022\n\n\002iv\030\004 \001(\014\"a\n\rChunkResponse"
    "\022\026\n\016processed_data\030\001 \001(\014\022\020\n\010chunk_id\030\002 \001"
    "(\005\022\017\n\007success\030\003 \001(\010\022\025\n\rerror_message\030\004 \001"
    "(\t\"#\n\013TestRequest\022\024\n\014test_message\030\001 \001(\t\""
    "S\n\014TestResponse\022\r\n\005alive\030\001 \001(\010\022\021\n\tworker"
    "_id\030\002 \001(\t\022\016\n\006status\030\003 \001(\t\022\021\n\ttimestamp\030\004"
    " \001(\0032\342\001\n\021EncryptionService\022C\n\014EncryptChu"
    "nk\022\030.encryption.ChunkRequest\032\031.encryptio"
    "n.ChunkResponse\022C\n\014DecryptChunk\022\030.encryp"
    "tion.ChunkRequest\032\031.encryption.ChunkResp"
    "onse\022C\n\016TestConnection\022\027.encryption.Test"
    "Request\032\030.encryption.TestResponseb\006proto"
    "3"
};
static ::absl::once_flag descriptor_table_encryption_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_encryption_2eproto = {
    false,
    false,
    561,
    descriptor_table_protodef_encryption_2eproto,
    "encryption.proto",
    &descriptor_table_encryption_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_encryption_2eproto::offsets,
    file_level_enum_descriptors_encryption_2eproto,
    file_level_service_descriptors_encryption_2eproto,
};
namespace encryption {
// ===================================================================

class ChunkRequest::_Internal {
 public:
};

ChunkRequest::ChunkRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:encryption.ChunkRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChunkRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::encryption::ChunkRequest& from_msg)
      : data_(arena, from.data_),
        key_(arena, from.key_),
        iv_(arena, from.iv_),
        _cached_size_{0} {}

ChunkRequest::ChunkRequest(
    ::google::protobuf::Arena* arena,
    const ChunkRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChunkRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.chunk_id_ = from._impl_.chunk_id_;

  // @@protoc_insertion_point(copy_constructor:encryption.ChunkRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChunkRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_(arena),
        key_(arena),
        iv_(arena),
        _cached_size_{0} {}

inline void ChunkRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.chunk_id_ = {};
}
ChunkRequest::~ChunkRequest() {
  // @@protoc_insertion_point(destructor:encryption.ChunkRequest)
  SharedDtor(*this);
}
inline void ChunkRequest::SharedDtor(MessageLite& self) {
  ChunkRequest& this_ = static_cast<ChunkRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.data_.Destroy();
  this_._impl_.key_.Destroy();
  this_._impl_.iv_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ChunkRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChunkRequest(arena);
}
constexpr auto ChunkRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChunkRequest),
                                            alignof(ChunkRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChunkRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChunkRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChunkRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChunkRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChunkRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChunkRequest>(), &ChunkRequest::ByteSizeLong,
            &ChunkRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_._cached_size_),
        false,
    },
    &ChunkRequest::kDescriptorMethods,
    &descriptor_table_encryption_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChunkRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> ChunkRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::encryption::ChunkRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes iv = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.iv_)}},
    // bytes data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.data_)}},
    // int32 chunk_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkRequest, _impl_.chunk_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.chunk_id_)}},
    // bytes key = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes data = 1;
    {PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 chunk_id = 2;
    {PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.chunk_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes key = 3;
    {PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes iv = 4;
    {PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.iv_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:encryption.ChunkRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.iv_.ClearToEmpty();
  _impl_.chunk_id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChunkRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChunkRequest& this_ = static_cast<const ChunkRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChunkRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChunkRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:encryption.ChunkRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes data = 1;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // int32 chunk_id = 2;
          if (this_._internal_chunk_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_chunk_id(), target);
          }

          // bytes key = 3;
          if (!this_._internal_key().empty()) {
            const std::string& _s = this_._internal_key();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          // bytes iv = 4;
          if (!this_._internal_iv().empty()) {
            const std::string& _s = this_._internal_iv();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:encryption.ChunkRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChunkRequest::ByteSizeLong(const MessageLite& base) {
          const ChunkRequest& this_ = static_cast<const ChunkRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChunkRequest::ByteSizeLong() const {
          const ChunkRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:encryption.ChunkRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes data = 1;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // bytes key = 3;
            if (!this_._internal_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_key());
            }
            // bytes iv = 4;
            if (!this_._internal_iv().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_iv());
            }
            // int32 chunk_id = 2;
            if (this_._internal_chunk_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_chunk_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChunkRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChunkRequest*>(&to_msg);
  auto& from = static_cast<const ChunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:encryption.ChunkRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (from._internal_chunk_id() != 0) {
    _this->_impl_.chunk_id_ = from._impl_.chunk_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkRequest::CopyFrom(const ChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:encryption.ChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChunkRequest::InternalSwap(ChunkRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iv_, &other->_impl_.iv_, arena);
        swap(_impl_.chunk_id_, other->_impl_.chunk_id_);
}

::google::protobuf::Metadata ChunkRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChunkResponse::_Internal {
 public:
};

ChunkResponse::ChunkResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:encryption.ChunkResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChunkResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::encryption::ChunkResponse& from_msg)
      : processed_data_(arena, from.processed_data_),
        error_message_(arena, from.error_message_),
        _cached_size_{0} {}

ChunkResponse::ChunkResponse(
    ::google::protobuf::Arena* arena,
    const ChunkResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChunkResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chunk_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, chunk_id_),
           offsetof(Impl_, success_) -
               offsetof(Impl_, chunk_id_) +
               sizeof(Impl_::success_));

  // @@protoc_insertion_point(copy_constructor:encryption.ChunkResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChunkResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : processed_data_(arena),
        error_message_(arena),
        _cached_size_{0} {}

inline void ChunkResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chunk_id_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, chunk_id_) +
               sizeof(Impl_::success_));
}
ChunkResponse::~ChunkResponse() {
  // @@protoc_insertion_point(destructor:encryption.ChunkResponse)
  SharedDtor(*this);
}
inline void ChunkResponse::SharedDtor(MessageLite& self) {
  ChunkResponse& this_ = static_cast<ChunkResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.processed_data_.Destroy();
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ChunkResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChunkResponse(arena);
}
constexpr auto ChunkResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChunkResponse),
                                            alignof(ChunkResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChunkResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChunkResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChunkResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChunkResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChunkResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChunkResponse>(), &ChunkResponse::ByteSizeLong,
            &ChunkResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_._cached_size_),
        false,
    },
    &ChunkResponse::kDescriptorMethods,
    &descriptor_table_encryption_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChunkResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 46, 2> ChunkResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::encryption::ChunkResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string error_message = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.error_message_)}},
    // bytes processed_data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.processed_data_)}},
    // int32 chunk_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkResponse, _impl_.chunk_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.chunk_id_)}},
    // bool success = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChunkResponse, _impl_.success_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes processed_data = 1;
    {PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.processed_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 chunk_id = 2;
    {PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.chunk_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool success = 3;
    {PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string error_message = 4;
    {PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\0\0\0\15\0\0\0"
    "encryption.ChunkResponse"
    "error_message"
  }},
};

PROTOBUF_NOINLINE void ChunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:encryption.ChunkResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processed_data_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.chunk_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.chunk_id_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChunkResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChunkResponse& this_ = static_cast<const ChunkResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChunkResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChunkResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:encryption.ChunkResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes processed_data = 1;
          if (!this_._internal_processed_data().empty()) {
            const std::string& _s = this_._internal_processed_data();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // int32 chunk_id = 2;
          if (this_._internal_chunk_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_chunk_id(), target);
          }

          // bool success = 3;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_success(), target);
          }

          // string error_message = 4;
          if (!this_._internal_error_message().empty()) {
            const std::string& _s = this_._internal_error_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "encryption.ChunkResponse.error_message");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:encryption.ChunkResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChunkResponse::ByteSizeLong(const MessageLite& base) {
          const ChunkResponse& this_ = static_cast<const ChunkResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChunkResponse::ByteSizeLong() const {
          const ChunkResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:encryption.ChunkResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes processed_data = 1;
            if (!this_._internal_processed_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_processed_data());
            }
            // string error_message = 4;
            if (!this_._internal_error_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_message());
            }
            // int32 chunk_id = 2;
            if (this_._internal_chunk_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_chunk_id());
            }
            // bool success = 3;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChunkResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChunkResponse*>(&to_msg);
  auto& from = static_cast<const ChunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:encryption.ChunkResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_processed_data().empty()) {
    _this->_internal_set_processed_data(from._internal_processed_data());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_chunk_id() != 0) {
    _this->_impl_.chunk_id_ = from._impl_.chunk_id_;
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkResponse::CopyFrom(const ChunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:encryption.ChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChunkResponse::InternalSwap(ChunkResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.processed_data_, &other->_impl_.processed_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.success_)
      + sizeof(ChunkResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.chunk_id_)>(
          reinterpret_cast<char*>(&_impl_.chunk_id_),
          reinterpret_cast<char*>(&other->_impl_.chunk_id_));
}

::google::protobuf::Metadata ChunkResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestRequest::_Internal {
 public:
};

TestRequest::TestRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:encryption.TestRequest)
}
inline PROTOBUF_NDEBUG_INLINE TestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::encryption::TestRequest& from_msg)
      : test_message_(arena, from.test_message_),
        _cached_size_{0} {}

TestRequest::TestRequest(
    ::google::protobuf::Arena* arena,
    const TestRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:encryption.TestRequest)
}
inline PROTOBUF_NDEBUG_INLINE TestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : test_message_(arena),
        _cached_size_{0} {}

inline void TestRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:encryption.TestRequest)
  SharedDtor(*this);
}
inline void TestRequest::SharedDtor(MessageLite& self) {
  TestRequest& this_ = static_cast<TestRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.test_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TestRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestRequest(arena);
}
constexpr auto TestRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TestRequest),
                                            alignof(TestRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestRequest>(), &TestRequest::ByteSizeLong,
            &TestRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestRequest, _impl_._cached_size_),
        false,
    },
    &TestRequest::kDescriptorMethods,
    &descriptor_table_encryption_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 43, 2> TestRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::encryption::TestRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string test_message = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestRequest, _impl_.test_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string test_message = 1;
    {PROTOBUF_FIELD_OFFSET(TestRequest, _impl_.test_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\14\0\0\0\0\0\0"
    "encryption.TestRequest"
    "test_message"
  }},
};

PROTOBUF_NOINLINE void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:encryption.TestRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.test_message_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestRequest& this_ = static_cast<const TestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:encryption.TestRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string test_message = 1;
          if (!this_._internal_test_message().empty()) {
            const std::string& _s = this_._internal_test_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "encryption.TestRequest.test_message");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:encryption.TestRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestRequest::ByteSizeLong(const MessageLite& base) {
          const TestRequest& this_ = static_cast<const TestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestRequest::ByteSizeLong() const {
          const TestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:encryption.TestRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string test_message = 1;
            if (!this_._internal_test_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_test_message());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestRequest*>(&to_msg);
  auto& from = static_cast<const TestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:encryption.TestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_test_message().empty()) {
    _this->_internal_set_test_message(from._internal_test_message());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:encryption.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestRequest::InternalSwap(TestRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.test_message_, &other->_impl_.test_message_, arena);
}

::google::protobuf::Metadata TestRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestResponse::_Internal {
 public:
};

TestResponse::TestResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:encryption.TestResponse)
}
inline PROTOBUF_NDEBUG_INLINE TestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::encryption::TestResponse& from_msg)
      : worker_id_(arena, from.worker_id_),
        status_(arena, from.status_),
        _cached_size_{0} {}

TestResponse::TestResponse(
    ::google::protobuf::Arena* arena,
    const TestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, alive_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::alive_));

  // @@protoc_insertion_point(copy_constructor:encryption.TestResponse)
}
inline PROTOBUF_NDEBUG_INLINE TestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : worker_id_(arena),
        status_(arena),
        _cached_size_{0} {}

inline void TestResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, alive_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::alive_));
}
TestResponse::~TestResponse() {
  // @@protoc_insertion_point(destructor:encryption.TestResponse)
  SharedDtor(*this);
}
inline void TestResponse::SharedDtor(MessageLite& self) {
  TestResponse& this_ = static_cast<TestResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.worker_id_.Destroy();
  this_._impl_.status_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TestResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestResponse(arena);
}
constexpr auto TestResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TestResponse),
                                            alignof(TestResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestResponse>(), &TestResponse::ByteSizeLong,
            &TestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestResponse, _impl_._cached_size_),
        false,
    },
    &TestResponse::kDescriptorMethods,
    &descriptor_table_encryption_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 47, 2> TestResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::encryption::TestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 timestamp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestResponse, _impl_.timestamp_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.timestamp_)}},
    // bool alive = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestResponse, _impl_.alive_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.alive_)}},
    // string worker_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.worker_id_)}},
    // string status = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool alive = 1;
    {PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.alive_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string worker_id = 2;
    {PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.worker_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string status = 3;
    {PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\27\0\11\6\0\0\0\0"
    "encryption.TestResponse"
    "worker_id"
    "status"
  }},
};

PROTOBUF_NOINLINE void TestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:encryption.TestResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_id_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.alive_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.alive_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestResponse& this_ = static_cast<const TestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:encryption.TestResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool alive = 1;
          if (this_._internal_alive() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_alive(), target);
          }

          // string worker_id = 2;
          if (!this_._internal_worker_id().empty()) {
            const std::string& _s = this_._internal_worker_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "encryption.TestResponse.worker_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string status = 3;
          if (!this_._internal_status().empty()) {
            const std::string& _s = this_._internal_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "encryption.TestResponse.status");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int64 timestamp = 4;
          if (this_._internal_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_timestamp(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:encryption.TestResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestResponse::ByteSizeLong(const MessageLite& base) {
          const TestResponse& this_ = static_cast<const TestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestResponse::ByteSizeLong() const {
          const TestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:encryption.TestResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string worker_id = 2;
            if (!this_._internal_worker_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_worker_id());
            }
            // string status = 3;
            if (!this_._internal_status().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_status());
            }
            // int64 timestamp = 4;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_timestamp());
            }
            // bool alive = 1;
            if (this_._internal_alive() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestResponse*>(&to_msg);
  auto& from = static_cast<const TestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:encryption.TestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_alive() != 0) {
    _this->_impl_.alive_ = from._impl_.alive_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestResponse::CopyFrom(const TestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:encryption.TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestResponse::InternalSwap(TestResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.worker_id_, &other->_impl_.worker_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.alive_)
      + sizeof(TestResponse::_impl_.alive_)
      - PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata TestResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace encryption
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_encryption_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
