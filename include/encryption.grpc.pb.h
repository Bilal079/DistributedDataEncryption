// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: encryption.proto
#ifndef GRPC_encryption_2eproto__INCLUDED
#define GRPC_encryption_2eproto__INCLUDED

#include "encryption.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace encryption {

class EncryptionService final {
 public:
  static constexpr char const* service_full_name() {
    return "encryption.EncryptionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::encryption::ChunkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>> AsyncEncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>>(AsyncEncryptChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>> PrepareAsyncEncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>>(PrepareAsyncEncryptChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::encryption::ChunkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>> AsyncDecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>>(AsyncDecryptChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>> PrepareAsyncDecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>>(PrepareAsyncDecryptChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::encryption::TestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::TestResponse>> AsyncTestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::TestResponse>>(AsyncTestConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::TestResponse>> PrepareAsyncTestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::encryption::TestResponse>>(PrepareAsyncTestConnectionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>* AsyncEncryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>* PrepareAsyncEncryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>* AsyncDecryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::encryption::ChunkResponse>* PrepareAsyncDecryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::encryption::TestResponse>* AsyncTestConnectionRaw(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::encryption::TestResponse>* PrepareAsyncTestConnectionRaw(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::encryption::ChunkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>> AsyncEncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>>(AsyncEncryptChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>> PrepareAsyncEncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>>(PrepareAsyncEncryptChunkRaw(context, request, cq));
    }
    ::grpc::Status DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::encryption::ChunkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>> AsyncDecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>>(AsyncDecryptChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>> PrepareAsyncDecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>>(PrepareAsyncDecryptChunkRaw(context, request, cq));
    }
    ::grpc::Status TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::encryption::TestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>> AsyncTestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>>(AsyncTestConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>> PrepareAsyncTestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>>(PrepareAsyncTestConnectionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptChunk(::grpc::ClientContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response, std::function<void(::grpc::Status)>) override;
      void TestConnection(::grpc::ClientContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* AsyncEncryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* PrepareAsyncEncryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* AsyncDecryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::encryption::ChunkResponse>* PrepareAsyncDecryptChunkRaw(::grpc::ClientContext* context, const ::encryption::ChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>* AsyncTestConnectionRaw(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::encryption::TestResponse>* PrepareAsyncTestConnectionRaw(::grpc::ClientContext* context, const ::encryption::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EncryptChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_DecryptChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_TestConnection_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status EncryptChunk(::grpc::ServerContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response);
    virtual ::grpc::Status DecryptChunk(::grpc::ServerContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response);
    virtual ::grpc::Status TestConnection(::grpc::ServerContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_EncryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EncryptChunk() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EncryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptChunk(::grpc::ServerContext* context, ::encryption::ChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::encryption::ChunkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DecryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DecryptChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DecryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptChunk(::grpc::ServerContext* context, ::encryption::ChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::encryption::ChunkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestConnection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TestConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestConnection(::grpc::ServerContext* /*context*/, const ::encryption::TestRequest* /*request*/, ::encryption::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestConnection(::grpc::ServerContext* context, ::encryption::TestRequest* request, ::grpc::ServerAsyncResponseWriter< ::encryption::TestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EncryptChunk<WithAsyncMethod_DecryptChunk<WithAsyncMethod_TestConnection<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_EncryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EncryptChunk() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::encryption::ChunkRequest, ::encryption::ChunkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response) { return this->EncryptChunk(context, request, response); }));}
    void SetMessageAllocatorFor_EncryptChunk(
        ::grpc::MessageAllocator< ::encryption::ChunkRequest, ::encryption::ChunkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::encryption::ChunkRequest, ::encryption::ChunkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EncryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncryptChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DecryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DecryptChunk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::encryption::ChunkRequest, ::encryption::ChunkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::encryption::ChunkRequest* request, ::encryption::ChunkResponse* response) { return this->DecryptChunk(context, request, response); }));}
    void SetMessageAllocatorFor_DecryptChunk(
        ::grpc::MessageAllocator< ::encryption::ChunkRequest, ::encryption::ChunkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::encryption::ChunkRequest, ::encryption::ChunkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DecryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DecryptChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TestConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TestConnection() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::encryption::TestRequest, ::encryption::TestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::encryption::TestRequest* request, ::encryption::TestResponse* response) { return this->TestConnection(context, request, response); }));}
    void SetMessageAllocatorFor_TestConnection(
        ::grpc::MessageAllocator< ::encryption::TestRequest, ::encryption::TestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::encryption::TestRequest, ::encryption::TestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TestConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestConnection(::grpc::ServerContext* /*context*/, const ::encryption::TestRequest* /*request*/, ::encryption::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::encryption::TestRequest* /*request*/, ::encryption::TestResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_EncryptChunk<WithCallbackMethod_DecryptChunk<WithCallbackMethod_TestConnection<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EncryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EncryptChunk() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EncryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DecryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DecryptChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DecryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestConnection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TestConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestConnection(::grpc::ServerContext* /*context*/, const ::encryption::TestRequest* /*request*/, ::encryption::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EncryptChunk() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EncryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DecryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DecryptChunk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DecryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestConnection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TestConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestConnection(::grpc::ServerContext* /*context*/, const ::encryption::TestRequest* /*request*/, ::encryption::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EncryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EncryptChunk() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EncryptChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_EncryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncryptChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DecryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DecryptChunk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DecryptChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_DecryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DecryptChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TestConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TestConnection() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestConnection(context, request, response); }));
    }
    ~WithRawCallbackMethod_TestConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestConnection(::grpc::ServerContext* /*context*/, const ::encryption::TestRequest* /*request*/, ::encryption::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EncryptChunk() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::encryption::ChunkRequest, ::encryption::ChunkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::encryption::ChunkRequest, ::encryption::ChunkResponse>* streamer) {
                       return this->StreamedEncryptChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EncryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncryptChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::encryption::ChunkRequest,::encryption::ChunkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DecryptChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DecryptChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::encryption::ChunkRequest, ::encryption::ChunkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::encryption::ChunkRequest, ::encryption::ChunkResponse>* streamer) {
                       return this->StreamedDecryptChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DecryptChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DecryptChunk(::grpc::ServerContext* /*context*/, const ::encryption::ChunkRequest* /*request*/, ::encryption::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecryptChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::encryption::ChunkRequest,::encryption::ChunkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestConnection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::encryption::TestRequest, ::encryption::TestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::encryption::TestRequest, ::encryption::TestResponse>* streamer) {
                       return this->StreamedTestConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TestConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestConnection(::grpc::ServerContext* /*context*/, const ::encryption::TestRequest* /*request*/, ::encryption::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::encryption::TestRequest,::encryption::TestResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EncryptChunk<WithStreamedUnaryMethod_DecryptChunk<WithStreamedUnaryMethod_TestConnection<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_EncryptChunk<WithStreamedUnaryMethod_DecryptChunk<WithStreamedUnaryMethod_TestConnection<Service > > > StreamedService;
};

}  // namespace encryption


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_encryption_2eproto__INCLUDED
